{"version":3,"sources":["SearchBox.js","Card.js","CardList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","Title","imdbID","Year","Plot","style","height","src","alt","CardList","movies","cardArray","map","movie","i","key","App","onSearchChange","event","setState","searchfield","target","value","searchedMovies","fetch","state","then","response","json","undefined","Search","concat","console","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4OAiBeA,EAfG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,aAEjB,OACI,yBAAKC,UAAU,QACX,2BACIA,UAAY,sCACZC,KAAK,SACLC,YAAY,oBACZC,SAAUJ,MCWXK,G,MAnBF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAEhC,OACI,yBAAKR,UAAU,yBACX,yBAAKA,UAAU,6DAA6DS,MAAO,CAACC,OAAO,UAC3F,yBAAKC,IAAG,oCAA+BL,EAA/B,oBAAyDM,IAAI,cAEjE,4BAAKP,GACL,2BAAIE,GACJ,2BAAIC,OCOLK,EAdE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAETC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OAAO,kBAAC,EAAD,CAAMC,IAAKL,EAAOI,GAAGZ,OAAQD,MAAOS,EAAOI,GAAGb,MAAOC,OAAQQ,EAAOI,GAAGZ,OAAQC,KAAMO,EAAOI,GAAGX,KAAMC,KAAMM,EAAOI,GAAGV,UAGhI,OACI,yBAAKR,UAAU,aACZe,ICgDIK,E,kDArDb,aAAc,IAAD,8BACT,gBASJC,eAAe,SAACC,GAEZ,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,MAAOC,eAAe,KAC/DC,MAAM,6BAAD,OAA8B,EAAKC,MAAML,YAAzC,qBACJM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAM,SAAAC,QAEiBE,IAAnBF,EAASG,SAEV,EAAKX,SAAS,CAACI,eAAgBI,EAASG,OAAQpB,OAAQ,KAExD,EAAKe,MAAMF,eAAeX,KAAI,SAACC,EAAMC,GACnCU,MAAM,6BAAD,OAA8B,EAAKC,MAAMF,eAAeT,GAAGZ,OAA3D,qBACFwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAM,SAAAC,GAEH,EAAKR,SAAS,CACZT,OAAQ,EAAKe,MAAMf,OAAOqB,OAAOJ,gBA3B/C,EAAKF,MAAQ,CACTf,OAAS,GACTU,YAAa,GACbG,eAAe,IALV,E,qDA2CT,OADFS,QAAQC,IAAIC,KAAKT,MAAMF,gBAErB,yBAAK3B,UAAU,wBACX,wBAAIA,UAAU,oBAAd,uBACA,kBAAC,EAAD,CAAWD,aAAcuC,KAAKjB,iBAC9B,kBAAC,EAAD,CAAUP,OAAUwB,KAAKT,MAAMf,c,GAhDvByB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.a52137ae.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange}) => {\r\n    \r\n    return(\r\n        <div className='pa2 '>\r\n            <input\r\n                className = 'pa3 ba b--green bg-lightest-blue tc' \r\n                type='search' \r\n                placeholder='Enter Movie Title' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({Title, imdbID, Year, Plot}) => {\r\n    \r\n    return(\r\n        <div className=\"fl w-100 w-25-ns pa2 \"  >\r\n            <div className=\"b--solid b--light-silver grow bg-lightest-blue shadow-5 tc\" style={{height:'550px' }}>\r\n            <img src={`http://img.omdbapi.com/?i=${imdbID}&apikey=51d5b5fa`} alt=\"No Poster\" />\r\n            \r\n                <h2>{Title}</h2>\r\n                <p>{Year}</p>\r\n                <p>{Plot}</p>\r\n                {/* <a class=\"f6 link dim ph3 pv2 mb2 dib white bg-light-purple\" href=\"#0\">See full plot and cast</a> */}\r\n                \r\n            \r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({movies}) => {\r\n\r\n    const cardArray = movies.map((movie,i)=> {\r\n        return <Card key={movies[i].imdbID} Title={movies[i].Title} imdbID={movies[i].imdbID} Year={movies[i].Year} Plot={movies[i].Plot}/>\r\n    });\r\n    \r\n    return(\r\n        <div className=\"cf ph2-ns\">\r\n          {cardArray}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\nimport SearchBox from './SearchBox';\nimport './App.css';\nimport CardList from './CardList';\n\n\nclass App extends React.Component {\n  constructor(){\n      super()\n      this.state = {\n          movies : [], \n          searchfield: '',\n          searchedMovies:[]   \n      }\n  }\n\n\n  onSearchChange=(event)=>{\n      \n      this.setState({searchfield: event.target.value, searchedMovies:[]})\n      fetch(`http://www.omdbapi.com/?s=${this.state.searchfield}&apikey=51d5b5fa`)\n      .then(response => response.json()\n      )\n      .then( response => {\n        /* console.log(response) */\n        if(response.Search !==undefined){\n          \n          this.setState({searchedMovies: response.Search, movies: []})\n            \n          this.state.searchedMovies.map((movie,i)=>{\n            fetch(`http://www.omdbapi.com/?i=${this.state.searchedMovies[i].imdbID}&apikey=51d5b5fa`)\n              .then(response => response.json()\n              )\n              .then( response => {\n                \n                  this.setState({\n                    movies: this.state.movies.concat(response)\n                  })\n                  \n                })\n                \n         })\n            \n      \n        }\n      })      \n  }\n\n  render() {\n    console.log(this.state.searchedMovies)\n      return (\n      <div className='tc mw9 center ph3-ns'>\n          <h1 className='f1 lightest-blue'>Search for a movie </h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <CardList movies = {this.state.movies} />\n      </div>\n\n  );}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}